"use client";

import React, { createContext, useContext, useEffect, useState, useCallback } from "react";
import { ISearchResult } from "@/types/message/types";
import { useConversationApi } from "./hooks/useFetchConversations"; 
import { useAuth } from "@/context/AuthContext";
import { useSocket } from "@/context/SocketContext"; //


interface ChatListUpdate { // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡¶æ‡¶á‡¶™
    conversationId: string;
    unreadCount: number;
    // lastMessage (optional) ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ unreadCount-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø
}

interface ConversationContextType {
  conversations: ISearchResult[];
  isConversationsLoading: boolean;
  setConversations: React.Dispatch<React.SetStateAction<ISearchResult[]>>;
  conversationError: string | null;
}

const ConversationContext = createContext<ConversationContextType | undefined>(undefined);

export const useConversation = () => {
  const context = useContext(ConversationContext);
  if (!context)
    throw new Error("useConversation must be used within a ConversationProvider");
  return context;
};

export const ConversationProvider = ({ children }: { children: React.ReactNode }) => {
  const { token } = useAuth();
  const { socket } = useSocket();
  const { fetchInitialConversations, isConversationsLoading, conversationError } = useConversationApi();
  const [conversations, setConversations] = useState<ISearchResult[]>([]);

  useEffect(() => {
    if (!token) return;

    const loadConversations = async () => {
      console.log("üöÄ Initial conversation fetch (via custom hook)...");
      const result = await fetchInitialConversations();
      console.log(result?.conversations);
      if (result?.conversations) setConversations(result.conversations);
    };

    loadConversations();
  }, [token, fetchInitialConversations]);



  // 2. ‚úÖ Socket.IO ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç (unreadCount ‡¶Ü‡¶™‡¶°‡ßá‡¶ü)
    const handleConversationUpdate = useCallback((update: ChatListUpdate) => {
        console.log("Received conversation:update", update);

        setConversations(prev => {
            const index = prev.findIndex(c => c.id === update.conversationId);

            if (index !== -1) {
                // ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶®‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ unreadCount ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
                const updatedList = [...prev];
                updatedList[index] = {
                    ...updatedList[index],
                    unreadCount: update.unreadCount, // üí° ‡¶Ü‡¶®‡¶∞‡¶ø‡¶° ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü 0 ‡¶π‡¶¨‡ßá
                    // üîë ‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤: ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                };
                return updatedList;
            }
            // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶®‡¶ü‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶æ ‡¶Ü‡¶∏‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡•§
            return prev; 
        });
    }, []);

  useEffect(() => {
        if (!socket) return;
        
        // 'conversation:update' ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        socket.on("conversation:update", handleConversationUpdate);

        return () => {
            // ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶®‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶¨‡¶æ socket ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ
            socket.off("conversation:update", handleConversationUpdate);
        };
    }, [socket, handleConversationUpdate]);

  return (
    <ConversationContext.Provider
      value={{
        conversations,
        isConversationsLoading,
        setConversations,
        conversationError,
      }}
    >
      {children}
    </ConversationContext.Provider>
  );
};

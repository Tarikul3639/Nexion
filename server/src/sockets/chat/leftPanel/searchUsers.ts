// import { Server } from "socket.io";
// import { AuthenticatedSocket } from "@/types/chat"; 
// import User from "@/models/User"; 
// import Conversation, { IConversation } from "@/models/Conversation"; 
// import Message, { IMessage } from "@/models/Message/Message";
// // IConversationResult and ILastMessage must be defined in your types file
// import { IConversationResult, ILastMessage } from "./types"; 

// import mongoose, { FlattenMaps, Types } from "mongoose";

// /**
//  * Handles user search requests over WebSocket.
//  * Merges existing conversations (including direct chats) and potential new users.
//  */
// export const searchUsersHandler = (io: Server, socket: AuthenticatedSocket) => {
// Â  socket.on(
// Â  Â  "search_user_and_conversations",
// Â  Â  async ({ search }: { search: string }) => {
// Â  Â  Â  console.log("Search value: ", search);
// Â  Â  Â  try {
// Â  Â  Â  Â  if (!search || search.trim().length < 2) {
// Â  Â  Â  Â  Â  socket.emit("search_user_and_conversations_results", []);
// Â  Â  Â  Â  Â  return;
// Â  Â  Â  Â  }

// Â  Â  Â  Â  if (!socket.user) {
// Â  Â  Â  Â  Â  socket.emit("searchError", "Unauthorized");
// Â  Â  Â  Â  Â  return;
// Â  Â  Â  Â  }

// Â  Â  Â  Â  const currentUserId = socket.user._id; 
// Â  Â  Â  Â  const currentUserIdStr = currentUserId.toString(); 

// Â  Â  Â  Â  // --- 1. Search Conversations (Groups + Existing Direct) ---

// Â  Â  Â  Â  // Get the IDs of all users whose name/username matches the search term
// Â  Â  Â  Â  const matchedUsers = await User.find({
// Â  Â  Â  Â  Â  $or: [
// Â  Â  Â  Â  Â  Â  { name: { $regex: search, $options: "i" } },
// Â  Â  Â  Â  Â  Â  { username: { $regex: search, $options: "i" } },
// Â  Â  Â  Â  Â  ],
// Â  Â  Â  Â  Â  _id: { $ne: currentUserId },
// Â  Â  Â  Â  })
// Â  Â  Â  Â  Â  .select("_id")
// Â  Â  Â  Â  Â  .lean();

// Â  Â  Â  Â  const matchedUserIds = matchedUsers.map((u) => u._id);

// Â  Â  Â  Â  const conversationQuery = {
// Â  Â  Â  Â  Â  participants: currentUserId,
// Â  Â  Â  Â  Â  $or: [
// Â  Â  Â  Â  Â  Â  {
// Â  Â  Â  Â  Â  Â  Â  type: { $in: ["group", "classroom"] },
// Â  Â  Â  Â  Â  Â  Â  name: { $regex: search, $options: "i" },
// Â  Â  Â  Â  Â  Â  },
// Â  Â  Â  Â  Â  Â  { type: "direct", participants: { $in: matchedUserIds } },
// Â  Â  Â  Â  Â  ],
// Â  Â  Â  Â  };

// Â  Â  Â  Â  const conversationResults: FlattenMaps<IConversation>[] =
// Â  Â  Â  Â  Â  await Conversation.find(conversationQuery)
// Â  Â  Â  Â  Â  Â  // Nested populate for live sender name (reduces performance but ensures data freshness for last message sender)
// Â  Â  Â  Â  Â  Â  .populate({
// Â  Â  Â  Â  Â  Â  Â  path: "lastMessage",
// Â  Â  Â  Â  Â  Â  Â  // Select cached fields too, for fallback if senderId is null/deleted
// Â  Â  Â  Â  Â  Â  Â  select: "content type senderId senderName senderAvatar createdAt senderIdBackup",
// Â  Â  Â  Â  Â  Â  Â  populate: {
// Â  Â  Â  Â  Â  Â  Â  Â  path: "senderId", 
// Â  Â  Â  Â  Â  Â  Â  Â  select: "name avatar username", // Minimal user fields
// Â  Â  Â  Â  Â  Â  Â  },
// Â  Â  Â  Â  Â  Â  })
// Â  Â  Â  Â  Â  Â  // Populate participants with minimal fields, including necessary privacy/tracking data
// Â  Â  Â  Â  Â  Â  .populate({
// Â  Â  Â  Â  Â  Â  Â  path: "participants",
// Â  Â  Â  Â  Â  Â  Â  select: "name username avatar tracking.status tracking.lastActiveAt privacy.showStatus privacy.showLastSeen",
// Â  Â  Â  Â  Â  Â  })
// Â  Â  Â  Â  Â  Â  .select(
// Â  Â  Â  Â  Â  Â  Â  "name type lastMessage participants updatedAt avatar isPinned"
// Â  Â  Â  Â  Â  Â  )
// Â  Â  Â  Â  Â  Â  .sort({ updatedAt: -1 })
// Â  Â  Â  Â  Â  Â  .limit(20)
// Â  Â  Â  Â  Â  Â  .lean();

// Â  Â  Â  Â  // --- 2. Collect IDs of existing direct chat partners (Logic is fine) ---
// Â  Â  Â  Â  const existingDirectPartners = new Set<string>();
// Â  Â  Â  Â  const directConversations = conversationResults.filter(
// Â  Â  Â  Â  Â  (c) => c.type === "direct"
// Â  Â  Â  Â  );

// Â  Â  Â  Â  directConversations.forEach((conv) => {
// Â  Â  Â  Â  Â  // The partner is a populated object, not just an ID in .lean() results
// Â  Â  Â  Â  Â  const partner = (conv.participants as any[]).find(
// Â  Â  Â  Â  Â  Â  (p: any) => p._id.toString() !== currentUserIdStr
// Â  Â  Â  Â  Â  );
// Â  Â  Â  Â  Â  if (partner) {
// Â  Â  Â  Â  Â  Â  existingDirectPartners.add(partner._id.toString());
// Â  Â  Â  Â  Â  }
// Â  Â  Â  Â  });

// Â  Â  Â  Â  const excludedUserIds = new Set<string>([
// Â  Â  Â  Â  Â  currentUserIdStr,
// Â  Â  Â  Â  Â  ...existingDirectPartners,
// Â  Â  Â  Â  ]);

// Â  Â  Â  Â  // --- 3. Map Conversations, apply Privacy, and calculate Unread Count ---
// Â  Â  Â  Â  const mappedConversations = await Promise.all(
// Â  Â  Â  Â  Â  conversationResults.map(
// Â  Â  Â  Â  Â  Â  async (
// Â  Â  Â  Â  Â  Â  Â  conv: FlattenMaps<IConversation>
// Â  Â  Â  Â  Â  Â  ): Promise<IConversationResult> => {
// Â  Â  Â  Â  Â  Â  Â  const unreadCount = await Message.countDocuments({
// Â  Â  Â  Â  Â  Â  Â  Â  conversation: conv._id,
// Â  Â  Â  Â  Â  Â  Â  Â  readBy: { $ne: currentUserId },
// Â  Â  Â  Â  Â  Â  Â  });

// Â  Â  Â  Â  Â  Â  Â  const populatedLastMessage = conv.lastMessage as any;
// Â  Â  Â  Â  Â  Â  Â  
// Â  Â  Â  Â  Â  Â  Â  // ðŸ”¥ Last Message Mapping (Handles nested populate or falls back to cache)
// Â  Â  Â  Â  Â  Â  Â  const lastMessage: ILastMessage | null = populatedLastMessage
// Â  Â  Â  Â  Â  Â  Â  Â  ? {
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _id: populatedLastMessage._id.toString(),
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content: populatedLastMessage.content,
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type: populatedLastMessage.type,
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  createdAt: populatedLastMessage.createdAt,
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: populatedLastMessage.senderId 
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? {
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _id: populatedLastMessage.senderId._id.toString(),
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name: populatedLastMessage.senderId.name,
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  avatar: populatedLastMessage.senderId.avatar,
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : {
//                              // Fallback to cached data (Important for deleted users)
//                              _id: populatedLastMessage.senderIdBackup?.toString() || populatedLastMessage.senderId?.toString() || 'unknown',
//                              name: populatedLastMessage.senderName || 'Unknown User',
//                              avatar: populatedLastMessage.senderAvatar,
//                          },
// Â  Â  Â  Â  Â  Â  Â  Â  Â  }
// Â  Â  Â  Â  Â  Â  Â  Â  : null;
// Â  Â  Â  Â  Â  Â  
// Â  Â  Â  Â  Â  Â  // Final result mapping
// Â  Â  Â  Â  Â  Â  const result: IConversationResult & { partnerStatus?: string; partnerLastActiveAt?: Date | null } = {
// Â  Â  Â  Â  Â  Â  Â  Â  id: conv._id.toString(),
// Â  Â  Â  Â  Â  Â  Â  Â  name: conv.name,
// Â  Â  Â  Â  Â  Â  Â  Â  type: conv.type,
// Â  Â  Â  Â  Â  Â  Â  Â  avatar: conv.avatar,
// Â  Â  Â  Â  Â  Â  Â  Â  isPinned: conv.isPinned ?? false,
// Â  Â  Â  Â  Â  Â  Â  Â  updatedAt: conv.updatedAt,
// Â  Â  Â  Â  Â  Â  Â  Â  unreadCount: unreadCount,
// Â  Â  Â  Â  Â  Â  Â  Â  lastMessage: lastMessage,
// Â  Â  Â  Â  Â  Â  Â  Â  displayType: "conversation",
// Â  Â  Â  Â  Â  Â  };

// Â  Â  Â  Â  Â  Â  if (conv.type === "direct") {
// Â  Â  Â  Â  Â  Â  Â  Â  // Find partner (who is a populated User object now)
// Â  Â  Â  Â  Â  Â  Â  Â  const partner = (conv.participants as any[]).find(
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (p: any) => p._id.toString() !== currentUserIdStr
// Â  Â  Â  Â  Â  Â  Â  Â  );

// Â  Â  Â  Â  Â  Â  Â  Â  if (partner) {
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Extract data
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const partnerStatus = partner.tracking?.status;
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const partnerShowStatus = partner.privacy?.showStatus;
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const partnerShowLastSeen = partner.privacy?.showLastSeen;
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const partnerLastActiveAt = partner.tracking?.lastActiveAt;

// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // 1. Apply Status Privacy: If partner hides status, set it to 'hidden'
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const effectiveStatus = 
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (partnerShowStatus === false) ? 'hidden' : partnerStatus;

// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // 2. Apply Last Seen Privacy: Show Last Active ONLY if: 
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  //    a) User allows it (partnerShowLastSeen === true) AND 
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  //    b) Partner is NOT currently online (to avoid showing both 'online' and a timestamp)
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  let effectiveLastActiveAt = null;

// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (partnerShowLastSeen === true && effectiveStatus !== 'online') {
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  effectiveLastActiveAt = partnerLastActiveAt;
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  result.partnerId = partner._id.toString();
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  result.partnerStatus = effectiveStatus;
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  result.partnerLastActiveAt = effectiveLastActiveAt; // Send Date or null
// Â  Â  Â  Â  Â  Â  Â  Â  }

// Â  Â  Â  Â  Â  Â  } 
// Â  Â  Â  Â  Â  Â  return result;
// Â  Â  Â  Â  Â  Â  }
// Â  Â  Â  Â  Â  )
// Â  Â  Â  Â  );

// Â  Â  Â  Â  // --- 4. Search Users (Excluding Self and Existing Direct Partners) ---
// Â  Â  Â  Â  const potentialNewUsers = await User.find({
// Â  Â  Â  Â  Â  $or: [
// Â  Â  Â  Â  Â  Â  { name: { $regex: search, $options: "i" } },
// Â  Â  Â  Â  Â  Â  { username: { $regex: search, $options: "i" } },
// Â  Â  Â  Â  Â  ],
// Â  Â  Â  Â  Â  _id: {
// Â  Â  Â  Â  Â  Â  $nin: Array.from(excludedUserIds).map(
// Â  Â  Â  Â  Â  Â  Â  (id) => new mongoose.Types.ObjectId(id)
// Â  Â  Â  Â  Â  Â  ),
// Â  Â  Â  Â  Â  },
// Â  Â  Â  Â  })
// Â  Â  Â  Â  Â  // ðŸ”¥ Select minimal user fields + privacy/tracking
// Â  Â  Â  Â  Â  .select("name username avatar tracking.status privacy.showStatus") 
// Â  Â  Â  Â  Â  .limit(20)
// Â  Â  Â  Â  Â  .lean();

// Â  Â  Â  Â  // --- 5. Map Users (as potential new contacts) ---
// Â  Â  Â  Â  const mappedUsers = potentialNewUsers.map((user: any) => {
// Â  Â  Â  Â  Â  const isFriend = !!(
// Â  Â  Â  Â  Â  Â  user.friends &&
// Â  Â  Â  Â  Â  Â  user.friends.some(
// Â  Â  Â  Â  Â  Â  Â  (f: mongoose.Types.ObjectId) => f.toString() === currentUserIdStr
// Â  Â  Â  Â  Â  Â  )
// Â  Â  Â  Â  Â  );

// Â  Â  Â  Â  Â  // ðŸ”¥ PRIVACY CHECK for new User (Only show status if allowed)
// Â  Â  Â  Â  Â  const effectiveStatus = 
// Â  Â  Â  Â  Â  Â  (user.privacy?.showStatus === false) ? 'hidden' : user.tracking?.status;

// Â  Â  Â  Â  Â  return {
// Â  Â  Â  Â  Â  Â  id: user._id.toString(),
// Â  Â  Â  Â  Â  Â  displayType: "user",
// Â  Â  Â  Â  Â  Â  name: user.name,
// Â  Â  Â  Â  Â  Â  username: user.username,
// Â  Â  Â  Â  Â  Â  avatar: user.avatar,
// Â  Â  Â  Â  Â  Â  status: effectiveStatus,
// Â  Â  Â  Â  Â  Â  isFriend: isFriend,
// Â  Â  Â  Â  Â  Â  type: "direct", 
// Â  Â  Â  Â  Â  Â  isPinned: false,
// Â  Â  Â  Â  Â  Â  unreadCount: 0,
//             // LastActiveAt is not sent for new user search results as it's less critical here
// Â  Â  Â  Â  Â  };
// Â  Â  Â  Â  });

// Â  Â  Â  Â  // --- 6. Merge and Final Emitter (Conversations prioritized) ---
// Â  Â  Â  Â  const results = [...mappedConversations, ...mappedUsers];

// Â  Â  Â  Â  socket.emit("search_user_and_conversations_results", results);
// Â  Â  Â  } catch (err) {
// Â  Â  Â  Â  console.error("Search error:", err);
// Â  Â  Â  Â  socket.emit("searchError", "Failed to search");
// Â  Â  Â  }
// Â  Â  }
// Â  );
// };
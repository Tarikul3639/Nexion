// src/sockets/handlers/readStatusHandler.ts

import { Server } from "socket.io";
import { AuthenticatedSocket } from "@/types/chat";
import Conversation from "@/models/Conversation";

export const handleReadStatus = (io: Server, socket: AuthenticatedSocket, userSockets: Map<string, Set<string>>) => {
    // üîë ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ: 'conversation:read' (‡¶Ö‡¶•‡¶¨‡¶æ 'mark_as_read')
    socket.on("conversation:read", async ({ conversationId }: { conversationId: string }) => {
        try {
            if (!socket.user || !conversationId) return;

            const currentUserId = socket.user._id;
            console.log("Read status update ID: ", currentUserId, "Name: ",socket.user.name);
            const now = new Date();

            // 1. ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ lastViewed ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            await Conversation.updateOne(
                { 
                    _id: conversationId,
                    'participants.user': currentUserId // ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ü‡¶ø ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ
                },
                { 
                    // $set: array filtering ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ lastViewed ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
                    $set: { 
                        'participants.$.lastViewed': now,
                    }
                }
            );

            // 2. ‡¶Ö‡¶™‡¶∂‡¶®‡¶æ‡¶≤ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü: ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ö‡¶Ç‡¶∂‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã
            // ‡¶è‡¶ü‡¶ø ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ‡ßá "Seen by..." ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§
            socket.to(conversationId).emit("conversation:marked_read", { 
                conversationId, 
                readerId: currentUserId,
                readAt: now.toISOString()
            });

        } catch (error) {
            console.error("Error updating lastViewed:", error);
        }
    });
};

// ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ attachAllHandlers-‡¶è ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
// src/sockets/handlers/sendMessageHandler.ts (UPDATED)

import { Server } from "socket.io";
import Conversation from "@/models/Conversation";
import Message from "@/models/Message/Message";
import { AuthenticatedSocket, MessageItem, DraftMessage } from "@/types/chat";
import mongoose from "mongoose";

// ðŸ’¡ New interface reflecting data passed from client
interface ISendMessageData {
Â  conversation?: string;
Â  sender: string;
Â  partner?: string;
Â  content: DraftMessage;
Â  type: MessageItem['type']; // ðŸ’¡ New: Message type (text, image, etc.)
Â  senderName: string; // ðŸ’¡ New: Sender name cache
Â  senderAvatar?: string; // ðŸ’¡ New: Sender avatar cache
Â  replyTo?: string;
Â  tempId: string;
}

export const sendMessageHandler = (
Â  io: Server,
Â  socket: AuthenticatedSocket,
Â  userSockets: Map<string, Set<string>>
) => {
Â  socket.on("sendMessage", async (data: ISendMessageData) => {
Â  Â  console.log("Received message: ", data);
Â  Â  try {
Â  Â  Â  let conversationId = data.conversation;
Â  Â  Â  let conv: any = null;

Â  Â  Â  const senderId = socket.user?._id.toString();
Â  Â  Â  const partnerId = data.partner;

Â  Â  Â  if (senderId !== data.sender) {
Â  Â  Â  Â  throw new Error("Sender ID does not match authenticated user");
Â  Â  Â  }

Â  Â  Â  // 1. Handle new direct conversation creation
Â  Â  Â  if (!conversationId && partnerId) {
Â  Â  Â  Â  conv = await Conversation.findOne({
Â  Â  Â  Â  Â  type: "direct",
Â  Â  Â  Â  Â  participants: { $all: [senderId, partnerId] },
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!conv) {
Â  Â  Â  Â  Â  conv = await Conversation.create({
Â  Â  Â  Â  Â  Â  type: "direct",
Â  Â  Â  Â  Â  Â  participants: [senderId, partnerId],
Â  Â  Â  Â  Â  Â  // Optionally: Set the name/avatar for the *conversation* itself if needed
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  Â  Â  conversationId = (conv._id as mongoose.Types.ObjectId).toString();
Â  Â  Â  }

Â  Â  Â  if (!conversationId) {
Â  Â  Â  Â  throw new Error("Conversation not found or receiver missing");
Â  Â  Â  }

Â  Â  Â  // 2. Create the new Message document (ðŸ’¡ Updated to include new fields)
Â  Â  Â  const newMessage = await Message.create({
Â  Â  Â  Â  conversationId: conversationId, // Use conversationId as per Message model
Â  Â  Â  Â  senderId: senderId, // Use senderId as per Message model
Â  Â  Â  Â  // ðŸ”‘ Use the cached values sent from client (Client uses AuthContext for this)
Â  Â  Â  Â  senderName: data.senderName,
Â  Â  Â  Â  senderAvatar: data.senderAvatar,
Â  Â  Â  Â  content: data.content,
Â  Â  Â  Â  type: data.type, // ðŸ’¡ New: Set message type
Â  Â  Â  Â  replyToId: data.replyTo, // Use replyToId as per Message model
Â  Â  Â  Â  readBy: [new mongoose.Types.ObjectId(senderId)], // ReadBy should use ObjectId
Â  Â  Â  Â  isEdited: false,
Â  Â  Â  Â  deliveryStatus: "sent", // Set initial delivery status
Â  Â  Â  });

Â  Â  Â  // 3. Update Conversation's lastMessage
Â  Â  Â  const updatedConv = await Conversation.findByIdAndUpdate(
Â  Â  Â  Â  conversationId,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  lastMessage: newMessage._id,
Â  Â  Â  Â  Â  updatedAt: new Date(),
Â  Â  Â  Â  },
Â  Â  Â  Â  { new: true } // Return the updated conversation
Â  Â  Â  );

Â  Â  Â  // 4. Prepare message for broadcast (No need to populate, sender info is cached)
Â  Â  Â  // We can directly use the data from the newly created document
Â  Â  Â  const baseMsgObj: MessageItem = {
Â  Â  Â  Â  id: (newMessage._id as mongoose.Types.ObjectId).toString(),
Â  Â  Â  Â  conversationId: conversationId,
Â  Â  Â  Â  senderId: newMessage.senderId?.toString() || "",
Â  Â  Â  Â  senderName: newMessage.senderName || "",
Â  Â  Â  Â  senderAvatar: newMessage.senderAvatar || "",
Â  Â  Â  Â  content: newMessage.content as DraftMessage,
Â  Â  Â  Â  type: newMessage.type, // ðŸ’¡ New
Â  Â  Â  Â  updatedAt: newMessage.createdAt.toISOString(),
Â  Â  Â  Â  status: "sent", // Server confirmation status
Â  Â  Â  Â  // NOTE: role is not on the Message model, so it can be omitted or added if required
Â  Â  Â  Â  replyToId: newMessage.replyToId?.toString(),
Â  Â  Â  Â  isEdited: newMessage.isEdited ?? false,
Â  Â  Â  };

Â  Â  Â  // 5. Get participants and calculate unread count for ChatList Update
Â  Â  Â  const participants = updatedConv?.participants.map(p => p.toString()) || [];

Â  Â  Â  // NOTE: This unread count calculation is inefficient for every message. 
Â  Â  Â  // For production, consider incrementing a counter or using a separate model/query.
Â  Â  Â  const allMessages = await Message.find({ conversationId: conversationId }) // Use conversationId
Â  Â  Â  Â  .select("_id readBy")
Â  Â  Â  Â  .lean();

Â  Â  Â  // 6. Broadcast the message and chat list update
Â  Â  Â  for (const userId of participants) {
Â  Â  Â  Â  const sockets = userSockets.get(userId.toString());
Â  Â  Â  Â  Â  
Â  Â  Â  Â  const unreadCount = allMessages.filter(
Â  Â  Â  Â  Â  (msg) => !msg.readBy.map(String).includes(userId.toString())
Â  Â  Â  Â  ).length;

Â  Â  Â  Â  const chatListUpdate = {
Â  Â  Â  Â  Â  conversationId,
Â  Â  Â  Â  Â  unreadCount,
Â  Â  Â  Â  Â  lastMessage: {
Â  Â  Â  Â  Â  Â  id: baseMsgObj.id, // Use 'id' instead of '_id' for client
Â  Â  Â  Â  Â  Â  content: baseMsgObj.content,
Â  Â  Â  Â  Â  Â  createdAt: baseMsgObj.updatedAt,
Â  Â  Â  Â  Â  Â  sender: {
Â  Â  Â  Â  Â  Â  Â  id: baseMsgObj.senderId, // Use 'id'
Â  Â  Â  Â  Â  Â  Â  name: baseMsgObj.senderName,
Â  Â  Â  Â  Â  Â  Â  avatar: baseMsgObj.senderAvatar || "",
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  };

Â  Â  Â  Â  sockets?.forEach((sId) => {
Â  Â  Â  Â  Â  if (userId.toString() === data.sender) {
Â  Â  Â  Â  Â  Â  // Sender: Confirm message and update list
Â  Â  Â  Â  Â  Â  io.to(sId).emit("newMessage", { ...baseMsgObj, tempId: data.tempId }); // Confirm and replace optimistic
Â  Â  Â  Â  Â  Â  io.to(sId).emit("chatListUpdate", chatListUpdate);
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // Receiver: New message and update list
Â  Â  Â  Â  Â  Â  io.to(sId).emit("newMessage", baseMsgObj);
Â  Â  Â  Â  Â  Â  io.to(sId).emit("chatListUpdate", chatListUpdate);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  } catch (err) {
Â  Â  Â  console.error("sendMessage error:", err);
Â  Â  Â  // Send error back to the sender
Â  Â  Â  socket.emit("sendMessageError", { 
Â  Â  Â  Â  tempId: data.tempId, 
Â  Â  Â  Â  message: "Failed to send message" 
Â  Â  Â  });
Â  Â  }
Â  });
};